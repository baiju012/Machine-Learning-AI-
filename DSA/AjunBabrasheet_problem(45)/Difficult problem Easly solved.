*****************J.M.R.K*********************

By architecture and diagram so that easly understand.


Pascal's Trangle:
The triangle starts with a 1 at the top, and each subsequent number is the sum of the two numbers directly above it
Each row of the triangle corresponds to the coefficients of the binomial expansion of (a + b)^n, where n is the row number (starting from 0). For example, the fourth row (1 3 3 1) corresponds to the expansion of (a + b)^3, which is a^3 + 3a^2b + 3ab^2 + b^3.

Set Matrix Zeros
One way to solve the problem is to use two arrays to keep track of the rows and columns that contain a zero. Then, iterate through the matrix and mark the corresponding row or column in the arrays if a zero is found. Finally, iterate through the matrix again and set any element to zero if its row or column was marked in the arrays
This solution has a time complexity of O(mn), where m is the number of rows and n is the number of columns in the matrix. It also has a space complexity of O(m + n) for the two arrays.

WE WILL START VERY SOON.
I left from 15 april to 30 april now.



CODING INTERVIEW MISTAKES

NOT CLARIFYING THE PROBLEM: candidates jump to problem without asking additional question moment prompt shared with them interviewer may correct them. if they dont candidate won;t realize they solbing wrong problem

FOCUSING ON UMIMPOTANT DETAILS: if problem is about using binary search, then focus more on larger parts and come back to the smaller details some spend half interview thinking about null exceptions or wrong input never get actually solving question

STAYING QUIET: Candidate going to get stuck interviewers know this , candidate needs to do know what questions to ask, think out loud, share thoughts and take intervieers input. Most candidates dead silent udually blc 










*************Basic Problem for practice ************

1.

#include <iostream>

int sumOfNaturalNumbers(int n) {
    /**
     * Calculates the sum of natural numbers from 1 to n using the formula: n*(n+1)/2
     * 
     * Args:
     *   n (int): The number up to which the sum of natural numbers needs to be calculated.
     * 
     * Returns:
     *   int: The sum of natural numbers from 1 to n.
     */
    return n * (n + 1) / 2;
}

int main() {
    int n = 10;
    int sum = sumOfNaturalNumbers(n);
    std::cout << "The sum of natural numbers from 1 to " << n << " is: " << sum << std::endl;
    return 0;
}


2.

#include <iostream>
#include <cmath>
using namespace std;

void findRoots(double a, double b, double c) {
    /**
     * Finds the roots of a quadratic equation: ax^2 + bx + c = 0
     * 
     * Args:
     *   a (double): The coefficient of x^2.
     *   b (double): The coefficient of x.
     *   c (double): The constant term.
     */
    double discriminant = b * b - 4 * a * c;
    double root1, root2;

    if (discriminant > 0) {
        // Two real and distinct roots
        root1 = (-b + sqrt(discriminant)) / (2 * a);
        root2 = (-b - sqrt(discriminant)) / (2 * a);
        cout << "The roots are real and distinct: " << root1 << " and " << root2 << endl;
    } else if (discriminant == 0) {
        // Two real and equal roots
        root1 = root2 = -b / (2 * a);
        cout << "The roots are real and equal: " << root1 << " and " << root2 << endl;
    } else {
        // Complex roots
        double realPart = -b / (2 * a);
        double imaginaryPart = sqrt(-discriminant) / (2 * a);
        cout << "The roots are complex: " << realPart << " + i" << imaginaryPart << " and "
             << realPart << " - i" << imaginaryPart << endl;
    }
}

int main() {
    double a, b, c;
    cout << "Enter the coefficients of the quadratic equation (ax^2 + bx + c = 0):" << endl;
    cout << "a = ";
    cin >> a;
    cout << "b = ";
    cin >> b;
    cout << "c = ";
    cin >> c;

    findRoots(a, b, c);

    return 0;
}


3.


#include <iostream>

void reverseArray(int arr[], int n, int reversedArr[]) {
  for (int i = 0; i < n; i++) {
    reversedArr[n - i - 1] = arr[i];
  }
}

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  int reversedArr[n];

  cout << "Original array: ";
  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  cout << endl;

  reverseArray(arr, n, reversedArr);

  cout << "Reversed array: ";
  for (int i = 0; i < n; i++) {
    cout << reversedArr[i] << " ";
  }
  cout << endl;

  return 0;
}

4.

#include <iostream>
#include <cmath> // for sqrt function

using namespace std;

struct Point {
  double x;
  double y;
};

double distance(const Point& p1, const Point& p2) {
  // Calculate the difference in x and y coordinates
  double dx = p2.x - p1.x;
  double dy = p2.y - p1.y;

  // Use the distance formula
  return sqrt(dx * dx + dy * dy);
}

int main() {
  Point point1, point2;

  // Get coordinates from the user
  cout << "Enter the x and y coordinates of the first point (p1): ";
  cin >> point1.x >> point1.y;

  cout << "Enter the x and y coordinates of the second point (p2): ";
  cin >> point2.x >> point2.y;

  // Calculate and print the distance
  double distance_between_points = distance(point1, point2);
  cout << "The distance between the two points is: " << distance_between_points << endl;
  return 0;
}

5.

#include <iostream>
using namespace std;
int max(int x, int y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

int main() {
  int num1, num2;
  cout << "Enter two numbers: ";
  cin >> num1 >> num2;
  int maximum = max(num1, num2);
  cout << "The maximum of " << num1 << " and " << num2 << " is: " << maximum << endl;
  return 0;
}

6.

#include <iostream>

using namespace std;

int max(int x, int y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

int main() {
  int num1, num2;

  cout << "Enter two numbers: ";
  cin >> num1 >> num2;

  int maximum = max(num1, num2);

  cout << "The maximum of " << num1 << " and " << num2 << " is: " << maximum << endl;

  return 0;
}

Learn Python

Output / Print in Python
Variables and datatypes
Strings
Taking input from users
Conditional statements
How to debug your code
Arrays and Loops
Functions in python
Tuples and Dictionary
Getting started with algorithmic problems



Maximum, Minimum, Average
Divisibility, Remainder, Absolute values
Basic mathematical equations with conditions
Greatest common divisor
Largest common multiple
Arithmetic progression
Sum of digits of a number


Array Traversal
Maximum and second maximum of an Array
Comparing multiple Arrays
Conditions on Arrays
Aggregation on Arrays
Constructing an Array based on conditions

Practice Strings

String traversal
Compare two strings
Compare consecutive elements on a single string
Check for Palindrome
Convert string to integer
Convert string to title case
Check if two strings are Anagrams
Substring check
Binary strings
Represent big integers using string


Practice Sorting

Using inbuilt sorting functions
Sorting an Array of elements
Reverse sorting
Sorting an Array of pairs
Sorting using custom sort function
Counting sort
Sort multiple arrays


Time complexity

Fundamentals of Time Complexity
Applying time complexity to DSA problems
Log and Square root time complexity
Practice problems

Python Projects

Number guessing game
Build a Calculator
Build a digital clock
Password Generator
Rock, Paper & Scissors game
Hangman: The word game























ARRAY 

Set Matrix Zeros
Pascal's Triangle
Next Permutation
Kadane's Algorithm
Sort an array of 0's, 1's and 2's
Stock Buy and Sell

ARRAY 2

Rotate Matrix
Merge Overlapping Subintervals
Merge two sorted arrays without extra space
Find the duplicate in an array of N+1 integers
Repeat and Missing Number
Inversion of Array (Pre-req: Merge Sort)


ARRAY 3

Search in a 2 D matrix
Pow(x, n)
Majority Element (>n/2 times)
Majority Element (n/3 times)
Grid Unique Paths
Reverse Pairs (Leetcode)


ARRAY 4

2Sum Problem
4-Sum Problem
Longest Consecutive Sequence
Largest Subarray with K sum	
Count number of subarrays with given xor K
Longest Substring without repeat

LINKED LIST:

Reverse a LinkedList
Find the middle of LinkedList
Merge two sorted Linked List (use method used in mergeSort)
Remove N-th node from back of LinkedList
Add two numbers as LinkedList
Delete a given Node when a node is given.(0(1) solution)


LINKED LIST 2

Find intersection point of Y LinkedList
Detect a cycle in Linked List
Reverse a LinkedList in groups of size k.
Check if a LinkedList is palindrome or not.
Find the starting point of the Loop of LinkedList
Flattening of a LinkedList


LINKED LIST AND ARRAYS:

Rotate a LinkedList
Clone a Linked List with random and next pointer
3 sum
Trapping Rainwater
Remove Duplicate from Sorted array
Max consecutive ones


GREEDY ALGORITHM:

N meetings in one room
Minimum number of platforms required for a railway	
Job sequencing Problem
Fractional Knapsack Problem
Greedy algorithm to find minimum number of coins
Activity Selection (it is the same as N meeting in one room)

RECURSION:

Subset Sums
Subset-II
Combination sum-1
Combination sum-2
Palindrome Partitioning
K-th permutation Sequence

RECURSION AND BACKTRACING:

Print all permutations of a string/array
N queens Problem
Sudoko Solver
M Coloring Problem
Rat in a Maze
Word Break (print all ways)

BINARY SEARCH:

The N-th root of an integer
Matrix Median
Find the element that appears once in a sorted array, and the rest element appears twice (Binary search)
Search element in a sorted and rotated array/ find pivot where it is rotated
Median of 2 sorted arrays
K-th element of two sorted arrays
Allocate Minimum Number of Pages
Aggressive Cows

HEAPS:


Max heap, Min Heap Implementation (Only for interviews)
Kth Largest Element
Maximum Sum Combination
Find Median from Data Stream
Merge K sorted arrays
K most frequent elements

STACK AND QUEUE:

Implement Stack using Arrays
Implement Queue using Arrays
Implement Stack using Queue (using single queue)
Implement Queue using Stack (0(1) amortized method)
Check for balanced parentheses
Next Greater Element
Sort a Stack

STACK AND QUEUE 2:

Next Smaller Element
LRU cache (IMPORTANT)
LFU cache
Largest rectangle in a histogram
Sliding Window maximum
Implement Min Stack
Rotten Orange (Using BFS)
Stock span problem
Find the maximum of minimums of every window size
The Celebrity Problem


STRING:

Reverse Words in a String
Longest Palindrome in a string
Roman Number to Integer and vice versa
Implement ATOI/STRSTR
Longest Common Prefix
Rabin Karp

STRING 2:

Z-Function
KMP algo / LPS(pi) array	
Minimum characters needed to be inserted in the beginning to make it palindromic
Check for Anagrams
Count and say
Compare version numbers

BINARY TREE:

Inorder Traversal
Preorder Traversal
Postorder Traversal
Morris Inorder Traversal
Morris Preorder Traversal
LeftView Of Binary Tree
Bottom View of Binary Tree
Top View of Binary Tree
Preorder inorder postorder in a single traversal
Vertical order traversal
Root to Node Path in Binary Tree
Max width of a Binary Tree

BINARY TREE 2:

Level order Traversal / Level order traversal in spiral form
Height of a Binary Tree
Diameter of Binary Tree
Check if the Binary tree is height-balanced or not
LCA in Binary Tree
Check if two trees are identical or not
Zig Zag Traversal of Binary Tree
Boundary Traversal of Binary Tree


BINARY TREE PART3

Maximum path sum
Construct Binary Tree from inorder and preorder
Construct Binary Tree from Inorder and Postorder
Symmetric Binary Tree
Flatten Binary Tree to LinkedList
Check if Binary Tree is the mirror of itself or not
Check for Children Sum Property

BINARY SEARCH TREE:

Populate Next Right pointers of Tree
Search given Key in BST
Construct BST from given keys
Construct a BST from a preorder traversal
Check is a BT is BST or not
Find LCA of two nodes in BST.
Find the inorder predecessor/successor of a given Key in BST.

BINARY SEARCH TREE 2

Floor in a BST
Ceil in a BST
Find K-th smallest element in BST
Find K-th largest element in BST
Find a pair with a given sum in BST
BST iterator
Size of the largest BST in a Binary Tree
Serialize and deserialize Binary Tree


BINARY TREES:MISCELLANEOUS

Binary Tree to Double Linked List
Find median in a stream of running integers.
K-th largest element in a stream.
Distinct numbers in Window.
K-th largest element in an unsorted array.
Flood-fill Algorithm


GRAPH:

Clone a graph (Not that easy as it looks)
DFS
BFS
Detect A cycle in Undirected Graph using BFS
Detect A cycle in Undirected Graph using DFS
Detect A cycle in a Directed Graph using DFS
Detect A cycle in a Directed Graph using BFS
Topological Sort BFS
Topological Sort DFS
Number of islands(Do in Grid and Graph Both)
Bipartite Check using BFS
Bipartite Check using DFS

GRAPH PART2:

Strongly Connected Component(using KosaRajuΓÇÖs algo)
DijkstraΓÇÖs Algorithm
Bellman-Ford Algo
Floyd Warshall Algorithm
MST using Prim's Algo
MST using KruskalΓÇÖs Algo

DP1:
Max Product Subarray
Longest Increasing Subsequence
Longest Common Subsequence
0-1 Knapsack
Edit Distance
Maximum sum increasing subsequence
Matrix Chain Multiplication


DP2:

Minimum sum path in the matrix, (count paths and similar type do, also backtrack to find the Minimum path)
Coin change
Subset Sum
Rod Cutting
Egg Dropping
Word Break
Palindrome Partitioning (MCM Variation)
Maximum profit in Job scheduling



TRIE:

Implement Trie (Prefix Tree)
Implement Trie - 2 (Prefix Tree)
Longest String with All Prefixes
Number of Distinct Substrings in a String
Power Set (this is very important)
Maximum XOR of two numbers in an array
Maximum XOR With an Element From Array
