By architecture and diagram so that easly understand.


Pascal's Trangle:
The triangle starts with a 1 at the top, and each subsequent number is the sum of the two numbers directly above it
Each row of the triangle corresponds to the coefficients of the binomial expansion of (a + b)^n, where n is the row number (starting from 0). For example, the fourth row (1 3 3 1) corresponds to the expansion of (a + b)^3, which is a^3 + 3a^2b + 3ab^2 + b^3.

Set Matrix Zeros
One way to solve the problem is to use two arrays to keep track of the rows and columns that contain a zero. Then, iterate through the matrix and mark the corresponding row or column in the arrays if a zero is found. Finally, iterate through the matrix again and set any element to zero if its row or column was marked in the arrays
This solution has a time complexity of O(mn), where m is the number of rows and n is the number of columns in the matrix. It also has a space complexity of O(m + n) for the two arrays.

WE WILL START VERY SOON.
I left from 15 april to 30 april now.



CODING INTERVIEW MISTAKES

NOT CLARIFYING THE PROBLEM: candidates jump to problem without asking additional question moment prompt shared with them interviewer may correct them. if they dont candidate won;t realize they solbing wrong problem

FOCUSING ON UMIMPOTANT DETAILS: if problem is about using binary search, then focus more on larger parts and come back to the smaller details some spend half interview thinking about null exceptions or wrong input never get actually solving question

STAYING QUIET: Candidate going to get stuck interviewers know this , candidate needs to do know what questions to ask, think out loud, share thoughts and take intervieers input. Most candidates dead silent udually blc 










*************Basic Problem for practice ************

1.

#include <iostream>

int sumOfNaturalNumbers(int n) {
    /**
     * Calculates the sum of natural numbers from 1 to n using the formula: n*(n+1)/2
     * 
     * Args:
     *   n (int): The number up to which the sum of natural numbers needs to be calculated.
     * 
     * Returns:
     *   int: The sum of natural numbers from 1 to n.
     */
    return n * (n + 1) / 2;
}

int main() {
    int n = 10;
    int sum = sumOfNaturalNumbers(n);
    std::cout << "The sum of natural numbers from 1 to " << n << " is: " << sum << std::endl;
    return 0;
}


2.

#include <iostream>
#include <cmath>
using namespace std;

void findRoots(double a, double b, double c) {
    /**
     * Finds the roots of a quadratic equation: ax^2 + bx + c = 0
     * 
     * Args:
     *   a (double): The coefficient of x^2.
     *   b (double): The coefficient of x.
     *   c (double): The constant term.
     */
    double discriminant = b * b - 4 * a * c;
    double root1, root2;

    if (discriminant > 0) {
        // Two real and distinct roots
        root1 = (-b + sqrt(discriminant)) / (2 * a);
        root2 = (-b - sqrt(discriminant)) / (2 * a);
        cout << "The roots are real and distinct: " << root1 << " and " << root2 << endl;
    } else if (discriminant == 0) {
        // Two real and equal roots
        root1 = root2 = -b / (2 * a);
        cout << "The roots are real and equal: " << root1 << " and " << root2 << endl;
    } else {
        // Complex roots
        double realPart = -b / (2 * a);
        double imaginaryPart = sqrt(-discriminant) / (2 * a);
        cout << "The roots are complex: " << realPart << " + i" << imaginaryPart << " and "
             << realPart << " - i" << imaginaryPart << endl;
    }
}

int main() {
    double a, b, c;
    cout << "Enter the coefficients of the quadratic equation (ax^2 + bx + c = 0):" << endl;
    cout << "a = ";
    cin >> a;
    cout << "b = ";
    cin >> b;
    cout << "c = ";
    cin >> c;

    findRoots(a, b, c);

    return 0;
}


3.


#include <iostream>

void reverseArray(int arr[], int n, int reversedArr[]) {
  for (int i = 0; i < n; i++) {
    reversedArr[n - i - 1] = arr[i];
  }
}

int main() {
  int arr[] = {1, 2, 3, 4, 5};
  int n = sizeof(arr) / sizeof(arr[0]);
  int reversedArr[n];

  cout << "Original array: ";
  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  cout << endl;

  reverseArray(arr, n, reversedArr);

  cout << "Reversed array: ";
  for (int i = 0; i < n; i++) {
    cout << reversedArr[i] << " ";
  }
  cout << endl;

  return 0;
}

4.

#include <iostream>
#include <cmath> // for sqrt function

using namespace std;

struct Point {
  double x;
  double y;
};

double distance(const Point& p1, const Point& p2) {
  // Calculate the difference in x and y coordinates
  double dx = p2.x - p1.x;
  double dy = p2.y - p1.y;

  // Use the distance formula
  return sqrt(dx * dx + dy * dy);
}

int main() {
  Point point1, point2;

  // Get coordinates from the user
  cout << "Enter the x and y coordinates of the first point (p1): ";
  cin >> point1.x >> point1.y;

  cout << "Enter the x and y coordinates of the second point (p2): ";
  cin >> point2.x >> point2.y;

  // Calculate and print the distance
  double distance_between_points = distance(point1, point2);
  cout << "The distance between the two points is: " << distance_between_points << endl;
  return 0;
}

5.

#include <iostream>
using namespace std;
int max(int x, int y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

int main() {
  int num1, num2;
  cout << "Enter two numbers: ";
  cin >> num1 >> num2;
  int maximum = max(num1, num2);
  cout << "The maximum of " << num1 << " and " << num2 << " is: " << maximum << endl;
  return 0;
}

6.

#include <iostream>

using namespace std;

int max(int x, int y) {
  if (x > y) {
    return x;
  } else {
    return y;
  }
}

int main() {
  int num1, num2;

  cout << "Enter two numbers: ";
  cin >> num1 >> num2;

  int maximum = max(num1, num2);

  cout << "The maximum of " << num1 << " and " << num2 << " is: " << maximum << endl;

  return 0;
}

